#version 330 core

out vec4 FragColor;

in vec3 FragPos;
in vec2 TexCoord;
in vec3 vNormal;

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float attenuation;
};

DirLight dirLight;
uniform PointLight pointLight;

struct Material {
    vec3 shininess;
    vec3 diffuse;
    vec3 specular;
};
Material material;

uniform vec3 lightDirection;  
uniform vec3 lightAmbient;
uniform vec3 lightDiffuse;
uniform vec3 lightSpecular;
uniform vec3 objectColor;

uniform vec3 viewPosition;
uniform vec3 viewDirection;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;

//light functions forward declarations
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
//settings
	dirLight.direction = lightDirection;
	dirLight.ambient = lightAmbient;
	dirLight.diffuse = lightDiffuse;
	dirLight.specular = lightSpecular;

// properties
    vec3 viewDir = normalize(viewPosition - FragPos);

    // phase 1: Directional lighting
    vec3 result = CalcDirLight(dirLight, vNormal, viewDir);

	result = CalcPointLight(pointLight, vNormal, FragPos, viewDir);

	//FragColor = texture(texture_diffuse1, TexCoord);
	FragColor = vec4(result, 1.0);
}

//light functions definitions
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), /*material.shininess*/ 32);
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse1, TexCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse1, TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoord)) /* vec3(1.0)*/;
    return (ambient + diffuse + specular) * objectColor;
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = light.attenuation /*/ (light.constant + light.linear * distance + light.quadratic * (distance * distance))*/;    
    // combine results
    vec3 ambient = light.ambient * vec3(texture(texture_diffuse1, TexCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(texture_diffuse1, TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoord));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular) * objectColor;
}